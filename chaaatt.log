"/Users/aswin/Documents/nextjs-fastapi-starter/app/chat/components/ChatMessages.tsx" ```"use client";
import { AnimatePresence } from "framer-motion";
import { FC, useEffect, useRef } from "react";
import ChatMessage from "./ChatMessage";

interface ChatMessagesProps {
  history: Array<[string, string]>;
}

const ChatMessages: FC<ChatMessagesProps> = ({ history }) => {
  const lastChatRef = useRef<HTMLDivElement | null>(null);

  useEffect(() => {
    lastChatRef.current?.scrollIntoView({ behavior: "auto", block: "start" });
  }, [history]);

  return (
    <div className="overflow-hidden flex flex-col gap-5 scrollbar scroll-smooth">
      {history.length === 0 ? (
        <div className="text-center opacity-50">
          Ask a question, or describe a task.
        </div>
      ) : (
        <AnimatePresence initial={false}>
          {history.map(([speaker, text], idx) => {
            return (
              <ChatMessage
                ref={idx === history.length - 1 ? lastChatRef : null}
                key={idx}
                speaker={speaker}
                text={text}
                left={idx % 2 !== 0}
              />
            );
          })}
        </AnimatePresence>
      )}
    </div>
  );
};
export default ChatMessages;
```
"/Users/aswin/Documents/nextjs-fastapi-starter/app/chat/components/ChatMessage.tsx" ```import { cn } from "@/lib/utils";
import { motion } from "framer-motion";
import { forwardRef, Ref } from "react";
import ReactMarkdown from "react-markdown";

const ChatMessage = forwardRef(
  (
    {
      speaker,
      text,
      left = false,
    }: {
      speaker: string;
      text: string;
      left?: boolean;
    },
    ref
  ) => {
    return (
      <motion.div
        ref={ref as Ref<HTMLDivElement>}
        initial={{ y: -24, opacity: 0 }}
        animate={{
          y: 0,
          opacity: 1,
          transition: { duration: 0.2, ease: "easeOut" },
        }}
        exit={{ y: -24, opacity: 0 }}
        className={cn(
          "py-3 px-3 rounded-lg border border-black/10 dark:border-white/25 flex flex-col max-w-4xl overflow-hidden scroll-pt-32",
          left ? "self-start mr-20" : "self-end ml-20"
        )}
      >
        <span className={cn("capitalize text-xs")}>{speaker}</span>
        <>
          <ReactMarkdown
            // remarkRehypeOptions={{}}
            className="prose dark:prose-invert"
          >
            {text}
          </ReactMarkdown>
        </>
      </motion.div>
    );
  }
);

ChatMessage.displayName = "ChatMessage";

export default ChatMessage;
``` "/Users/aswin/Documents/nextjs-fastapi-starter/app/chat/helpers/isSpeechRecognitionSupported.ts" ```export function isSpeechRecognitionSupported() {
  if (
    typeof window !== "undefined" &&
    ("SpeechRecognition" in window || "webkitSpeechRecognition" in window)
  ) {
    return true;
  }
  return false;
}
``` "/Users/aswin/Documents/nextjs-fastapi-starter/app/chat/hooks/useQuestion.ts" ```import { useEffect, useState } from "react";

import { useSupabase } from "@/app/supabase-provider";
import { useBrainConfig } from "@/lib/context/BrainConfigProvider/hooks/useBrainConfig";
import { useAxios } from "@/lib/useAxios";
import { redirect } from "next/navigation";
export const useQuestion = () => {
  const [question, setQuestion] = useState("");
  const [history, setHistory] = useState<Array<[string, string]>>([]);
  const [isPending, setIsPending] = useState(false);
  const { session } = useSupabase();
  const { axiosInstance } = useAxios();
  const {
    config: { maxTokens, model, temperature },
  } = useBrainConfig();
  if (session === null) {
    redirect("/login");
  }

  useEffect(()=>{
    // Check if history exists in local storage. If it does, fetch it and set it as history
    (async ()=>{
      const localHistory = await localStorage.getItem('history')
      if(localHistory){
        setHistory(JSON.parse(localHistory))
      }
    })()
  }, [])
  
  const askQuestion = async () => {
    setHistory((hist) => [...hist, ["user", question]]);
    setIsPending(true);

    const response = await axiosInstance.post(`/chat/`, {
      model,
      question,
      history,
      temperature,
      max_tokens: maxTokens,
    });
    setHistory(response.data.history);
    localStorage.setItem('history', JSON.stringify(response.data.history))
    setQuestion("");
    setIsPending(false);
  };

  const resetHistory = () => {
    localStorage.setItem('history', JSON.stringify([]))
    setHistory([])
  }

  return {
    isPending,
    history,
    question,
    setQuestion,
    resetHistory,
    askQuestion,
  };
};
```
"/Users/aswin/Documents/nextjs-fastapi-starter/app/chat/hooks/useSpeech.ts" ```import { useEffect, useState } from "react";
import { isSpeechRecognitionSupported } from "../helpers/isSpeechRecognitionSupported";
import { useQuestion } from "./useQuestion";

export const useSpeech = () => {
  const [isListening, setIsListening] = useState(false);
  const [speechSupported, setSpeechSupported] = useState(false);
  const { setQuestion } = useQuestion();

  useEffect(() => {
    if (isSpeechRecognitionSupported()) {
      setSpeechSupported(true);
      const SpeechRecognition =
        window.SpeechRecognition || window.webkitSpeechRecognition;

      const mic = new SpeechRecognition();

      mic.continuous = true;
      mic.interimResults = false;
      mic.lang = "en-US";

      mic.onstart = () => {
        console.log("Mics on");
      };

      mic.onend = () => {
        console.log("Mics off");
      };

      mic.onerror = (event: SpeechRecognitionErrorEvent) => {
        console.log(event.error);
        setIsListening(false);
      };

      mic.onresult = (event: SpeechRecognitionEvent) => {
        const interimTranscript =
          event.results[event.results.length - 1][0].transcript;
        setQuestion((prevQuestion) => prevQuestion + interimTranscript);
      };

      if (isListening) {
        mic.start();
      }

      return () => {
        if (mic) {
          mic.stop();
        }
      };
    }
  }, [isListening]);

  const startListening = () => {
    setIsListening((prevIsListening) => !prevIsListening);
  };

  return { startListening, speechSupported, isListening };
};
``` "/Users/aswin/Documents/nextjs-fastapi-starter/app/chat/page.tsx" ```"use client";
import Link from "next/link";
import { MdAutorenew, MdMic, MdMicOff, MdSettings } from "react-icons/md";
import Button from "../components/ui/Button";
import Card from "../components/ui/Card";
import PageHeading from "../components/ui/PageHeading";
import ChatMessages from "./components/ChatMessages";
import { useQuestion } from "./hooks/useQuestion";
import { useSpeech } from "./hooks/useSpeech";
import { Dispatch, SetStateAction } from "react";

interface ChatProps {
  history: Array<[string, string]>;
  setHistory: Dispatch<SetStateAction<[string, string][]>>;
}
export default function ChatPage({history, setHistory}: ChatProps) {
  const {isPending, question, askQuestion, setQuestion, resetHistory } =
    useQuestion();
  const {isListening, speechSupported, startListening } = useSpeech();
  return (
    <main className="min-h-0 w-full flex flex-col pt-32 flex-1 overflow-hidden">
      <section className="flex flex-col justify-center items-center gap-5 h-full overflow-auto style={{ marginBottom: '20px'}}">
        <PageHeading
          title="Chat with your brain"
          subtitle="Talk to a language model about your uploaded data"
        />
        {/* Chat */}
        <Card className="p-5 max-w-3xl w-full flex-1 mb-24 overflow-auto flex flex-col">
          <ChatMessages history={history} />
        </Card>
        <Card className="fixed left-1/2 w-full max-w-3xl bg-gray-100 dark:bg-gray-800 -translate-x-1/2 bottom-16 px-5 py-5 mb-5">
          <form
            onSubmit={(e) => {
              e.preventDefault();
              if (!isPending) askQuestion();
            }}
            className="w-full flex items-center justify-center gap-2"
          >
            <textarea
              autoFocus
              value={question}
              onChange={(e) => setQuestion(e.target.value)}
              onKeyDown={(e) => {
                if (e.key === "Enter" && !e.shiftKey) {
                  e.preventDefault();
                  if (!isPending) askQuestion();
                }
              }}
              className="w-full p-2 border border-gray-300 dark:border-gray-500 outline-none rounded dark:bg-gray-800"
              placeholder="Begin conversation here..."
            />
            <Button type="submit" isLoading={isPending}>
              {isPending ? "Thinking..." : "Chat"}
            </Button>
            <Button
              className="px-3"
              variant={"tertiary"}
              type="button"
              onClick={resetHistory}
              disabled={isPending}
            >
              <MdAutorenew className="text-2xl" />
            </Button>
            <Button
              className="px-3"
              variant={"tertiary"}
              type="button"
              onClick={startListening}
              disabled={!speechSupported}
            >
              {isListening ? (
                <MdMicOff className="text-2xl" />
              ) : (
                <MdMic className="text-2xl" />
              )}
            </Button>
            <Link href={"/config"}>
              <Button className="px-3" variant={"tertiary"}>
                <MdSettings className="text-2xl" />
              </Button>
            </Link>
          </form>
        </Card>
      </section>
    </main>
  );
}```. "- error app/chat/components/ChatMessages.tsx (19:15) @ length
- error TypeError: Cannot read properties of undefined (reading 'length')
    at ChatMessages (./app/chat/components/ChatMessages.tsx:27:27)
  17 |   return (
  18 |     <div className="overflow-hidden flex flex-col gap-5 scrollbar scroll-smooth">
> 19 |       {history.length === 0 ? (
     |               ^
  20 |         <div className="text-center opacity-50">
  21 |           Ask a question, or describe a task.
  22 |         </div>
- error app/chat/components/ChatMessages.tsx (19:15) @ length
- error TypeError: Cannot read properties of undefined (reading 'length')
    at ChatMessages (./app/chat/components/ChatMessages.tsx:27:27)
  17 |   return (
  18 |     <div className="overflow-hidden flex flex-col gap-5 scrollbar scroll-smooth">
> 19 |       {history.length === 0 ? (
     |               ^
  20 |         <div className="text-center opacity-50">
  21 |           Ask a question, or describe a task.
  22 |         </div>
- error app/chat/components/ChatMessages.tsx (19:15) @ length
- error TypeError: Cannot read properties of undefined (reading 'length')
    at ChatMessages (./app/chat/components/ChatMessages.tsx:27:27)
  17 |   return (
  18 |     <div className="overflow-hidden flex flex-col gap-5 scrollbar scroll-smooth">
> 19 |       {history.length === 0 ? (
     |               ^
  20 |         <div className="text-center opacity-50">
  21 |           Ask a question, or describe a task.
  22 |         </div>
- error app/chat/components/ChatMessages.tsx (19:15) @ length
- error TypeError: Cannot read properties of undefined (reading 'length')
    at ChatMessages (./app/chat/components/ChatMessages.tsx:27:27)
  17 |   return (
  18 |     <div className="overflow-hidden flex flex-col gap-5 scrollbar scroll-smooth">
> 19 |       {history.length === 0 ? (
     |               ^
  20 |         <div className="text-center opacity-50">
  21 |           Ask a question, or describe a task.
  22 |         </div>". this is the error i get in the cli when i run "npm run dev" for a nextjs frontend app with fastapi python backend.
  give me correct complete modified nextjs code to resolve this error.