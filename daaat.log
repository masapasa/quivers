"quivr/scripts/supabase_vector_store_document.sql" ```create extension vector;

-- Create a table to store your documents
create table if not exists documents (
id bigserial primary key,
content text, -- corresponds to Document.pageContent
metadata jsonb, -- corresponds to Document.metadata
embedding vector(1536) -- 1536 works for OpenAI embeddings, change if needed
);

CREATE FUNCTION match_documents(query_embedding vector(1536), match_count int)
    RETURNS TABLE(
        id bigint,
        content text,
        metadata jsonb,
        -- we return matched vectors to enable maximal marginal relevance searches
        embedding vector(1536),
        similarity float)
    LANGUAGE plpgsql
    AS $$
    # variable_conflict use_column
BEGIN
    RETURN query
    SELECT
        id,
        content,
        metadata,
        embedding,
        1 -(documents.embedding <=> query_embedding) AS similarity
    FROM
        documents
    ORDER BY
        documents.embedding <=> query_embedding
    LIMIT match_count;
END;
$$;```
"quivr/scripts/supabase_vector_store_summary.sql" ```-- Create a table to store your summaries
create table if not exists summaries (
    id bigserial primary key,
    document_id bigint references vectors(id),
    content text, -- corresponds to the summarized content
    metadata jsonb, -- corresponds to Document.metadata
    embedding vector(1536) -- 1536 works for OpenAI embeddings, change if needed
);

CREATE OR REPLACE FUNCTION match_summaries(query_embedding vector(1536), match_count int, match_threshold float)
    RETURNS TABLE(
        id bigint,
        document_id bigint,
        content text,
        metadata jsonb,
        -- we return matched vectors to enable maximal marginal relevance searches
        embedding vector(1536),
        similarity float)
    LANGUAGE plpgsql
    AS $$
    # variable_conflict use_column
BEGIN
    RETURN query
    SELECT
        id,
        document_id,
        content,
        metadata,
        embedding,
        1 -(summaries.embedding <=> query_embedding) AS similarity
    FROM
        summaries
    WHERE 1 - (summaries.embedding <=> query_embedding) > match_threshold
    ORDER BY
        summaries.embedding <=> query_embedding
    LIMIT match_count;
END;
$$;
```
"quivr/scripts/supabase_chats_table.sql" ```create table if not exists chats(
    chat_id uuid default uuid_generate_v4() primary key,
    user_id uuid references users(user_id),
    creation_time timestamp default current_timestamp,
    history jsonb,
    chat_name text
);```
"quivr/scripts/supabase_usage_table.sql" ```create table
  stats (
    -- A column called "time" with data type "timestamp"
    time timestamp,
    -- A column called "details" with data type "text"
    chat boolean,
    embedding boolean,
    details text,
    metadata jsonb,
    -- An "integer" primary key column called "id" that is generated always as identity
    id integer primary key generated always as identity
  );```
"quivr/scripts/supabase_new_store_documents.sql" ```create extension if not exists vector;

-- Create a table to store your documents
create table if not exists vectors (
id bigserial primary key,
user_id text, -- new column added here
content text, -- corresponds to Document.pageContent
metadata jsonb, -- corresponds to Document.metadata
embedding vector(1536) -- 1536 works for OpenAI embeddings, change if needed
);

CREATE OR REPLACE FUNCTION match_vectors(query_embedding vector(1536), match_count int, p_user_id text) -- user_id changed to p_user_id here
    RETURNS TABLE(
        id bigint,
        user_id text, -- new column added here
        content text,
        metadata jsonb,
        -- we return matched vectors to enable maximal marginal relevance searches
        embedding vector(1536),
        similarity float)
    LANGUAGE plpgsql
    AS $$
    # variable_conflict use_column
BEGIN
    RETURN query
    SELECT
        id,
        user_id, -- new column added here
        content,
        metadata,
        embedding,
        1 -(vectors.embedding <=> query_embedding) AS similarity
    FROM
        vectors
    WHERE vectors.user_id = p_user_id -- filter changed here
    ORDER BY
        vectors.embedding <=> query_embedding
    LIMIT match_count;
END;
$$;```
"quivr/scripts/supabase_users_table.sql" ```create table if not exists users(
    user_id uuid,
    email text,
    date text,
    requests_count int
);``` "Failed to run sql query: there is no unique constraint matching given keys for referenced table "users".". i get this error
when i try to create chats table. give me correct complete modified query to resolve this error based on code provided