"/Users/aswin/Documents/quivr/scripts/supabase_vector_store_document.sql" ```create extension vector;
create table if not exists documents (
id bigserial primary key,
content text,
metadata jsonb,
embedding vector(1536)
);
CREATE FUNCTION match_documents(query_embedding vector(1536), match_count int)
    RETURNS TABLE(
        id bigint,
        content text,
        metadata jsonb,
        embedding vector(1536),
        similarity float)
    LANGUAGE plpgsql
    AS $$
    # variable_conflict use_column
BEGIN
    RETURN query
    SELECT
        id,
        content,
        metadata,
        embedding,
        1 -(documents.embedding <=> query_embedding) AS similarity
    FROM
        documents
    ORDER BY
        documents.embedding <=> query_embedding
    LIMIT match_count;
END;
$$;```
"/Users/aswin/Documents/quivr/scripts/supabase_vector_store_summary.sql" ```create table if not exists summaries (
    id bigserial primary key,
    document_id bigint references vectors(id),
    content text,
    metadata jsonb,
    embedding vector(1536)
);

CREATE OR REPLACE FUNCTION match_summaries(query_embedding vector(1536), match_count int, match_threshold float)
    RETURNS TABLE(
        id bigint,
        document_id bigint,
        content text,
        metadata jsonb,
        embedding vector(1536),
        similarity float)
    LANGUAGE plpgsql
    AS $$
    # variable_conflict use_column
BEGIN
    RETURN query
    SELECT
        id,
        document_id,
        content,
        metadata,
        embedding,
        1 -(summaries.embedding <=> query_embedding) AS similarity
    FROM
        summaries
    WHERE 1 - (summaries.embedding <=> query_embedding) > match_threshold
    ORDER BY
        summaries.embedding <=> query_embedding
    LIMIT match_count;
END;
$$;
```
"/Users/aswin/Documents/quivr/scripts/supabase_chats_table.sql" ```create table if not exists chats(
    chat_id uuid default uuid_generate_v4() primary key,
    user_id uuid references users(user_id),
    creation_time timestamp default current_timestamp,
    history jsonb,
    chat_name text
);```
"/Users/aswin/Documents/quivr/scripts/supabase_usage_table.sql" ```create table
  stats (
    time timestamp,
    chat boolean,
    embedding boolean,
    details text,
    metadata jsonb,
    id integer primary key generated always as identity
  );```
"/Users/aswin/Documents/quivr/scripts/supabase_new_store_documents.sql" ```create extension if not exists vector;
create table if not exists vectors (
id bigserial primary key,
user_id text,
content text,
metadata jsonb,
embedding vector(1536)
);

CREATE OR REPLACE FUNCTION match_vectors(query_embedding vector(1536), match_count int, p_user_id text)
    RETURNS TABLE(
        id bigint,
        user_id text,
        content text,
        metadata jsonb,
        embedding vector(1536),
        similarity float)
    LANGUAGE plpgsql
    AS $$
    # variable_conflict use_column
BEGIN
    RETURN query
    SELECT
        id,
        user_id,
        content,
        metadata,
        embedding,
        1 -(vectors.embedding <=> query_embedding) AS similarity
    FROM
        vectors
    WHERE vectors.user_id = p_user_id
    ORDER BY
        vectors.embedding <=> query_embedding
    LIMIT match_count;
END;
$$;
```
"/Users/aswin/Documents/quivr/scripts/supabase_users_table.sql" ```create table if not exists users(
    user_id uuid unique,
    email text,
    date text,
    requests_count int
);``` "/Users/aswin/Documents/quivr/supabase/migrations/20230606131110_add_uuid_user_id.sql" ```BEGIN;
ALTER TABLE users ADD COLUMN email text;
UPDATE users SET email = user_id;
ALTER TABLE users DROP COLUMN user_id;
ALTER TABLE users ADD COLUMN user_id UUID DEFAULT gen_random_uuid() PRIMARY KEY;
COMMIT;```"Failed to run sql query: column "email" of relation "users" already exists". give me correct complete modified query to resolve this error