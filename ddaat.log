069 [INFO] utils.vectors: Creating vector for document
070 [INFO] utils.vectors: Document: page_content='[37] S. Yang, O. Nachum, Y. Du, J. Wei, P. Abbeel, and D. Schuurmans. Foundation models for\ndecision making: Problems, methods, and opportunities, 2023.\n[38] S. Yao, J. Zhao, D. Yu, N. Du, I. Shafran, K. Narasimhan, and Y. Cao. ReAct: Synergizing\nreasoning and acting in language models. arXiv preprint arXiv:2210.03629, 2022.\n[39] S. Zhang, Z. Chen, Y. Shen, M. Ding, J. B. Tenenbaum, and C. Gan. Planning with large\nlanguage models for code generation. In The Eleventh International Conference on Learning\nRepresentations, 2023. URL https://openreview.net/forum?id=Lr8cOOtYbfL.\n11' metadata={'file_sha1': '87f91b5a8507d4a7b2cdc8df16ba89c37e3b50e0', 'file_size': 766323, 'file_name': 'treeofthoughts.pdf', 'chunk_size': 500, 'chunk_overlap': 0, 'date': '20230620', 'summarization': 'false'}
227:INFO - error_code=invalid_api_key error_message= error_param=None error_type=invalid_request_error message='OpenAI API error received' stream_error=False
228 [ERROR] utils.vectors: Error creating vector for document <empty message>

2023-06-20 15:47:20,069 [INFO] utils.vectors: Creating vector for document
2023-06-20 15:47:20,070 [INFO] utils.vectors: Document: page_content='[37] S. Yang, O. Nachum, Y. Du, J. Wei, P. Abbeel, and D. Schuurmans. Foundation models for\ndecision making: Problems, methods, and opportunities, 2023.\n[38] S. Yao, J. Zhao, D. Yu, N. Du, I. Shafran, K. Narasimhan, and Y. Cao. ReAct: Synergizing\nreasoning and acting in language models. arXiv preprint arXiv:2210.03629, 2022.\n[39] S. Zhang, Z. Chen, Y. Shen, M. Ding, J. B. Tenenbaum, and C. Gan. Planning with large\nlanguage models for code generation. In The Eleventh International Conference on Learning\nRepresentations, 2023. URL https://openreview.net/forum?id=Lr8cOOtYbfL.\n11' metadata={'file_sha1': '87f91b5a8507d4a7b2cdc8df16ba89c37e3b50e0', 'file_size': 766323, 'file_name': 'treeofthoughts.pdf', 'chunk_size': 500, 'chunk_overlap': 0, 'date': '20230620', 'summarization': 'false'}
2023-06-20 15:47:20,227:INFO - error_code=invalid_api_key error_message= error_param=None error_type=invalid_request_error message='OpenAI API error received' stream_error=False
2023-06-20 15:47:20,228 [ERROR] utils.vectors: Error creating vector for document <empty message>
INFO:     127.0.0.1:61820 - "GET /brains HTTP/1.1" 200 OK
2023-06-20 20:23:27,147 [INFO] utils.vectors: Creating vector for document
2023-06-20 20:23:27,148 [INFO] utils.vectors: Document: page_content='1. Comprehensiveness: CodeTF strives to be a comprehensive library, encompassing various aspects of code large\nlanguage models. This includes functionalities such as loading and serving state-of-the-art models in different\nstyles (encoder-only, decoder-only, and encoder-decoder), pretraining and ﬁne-tuning, evaluation, and source code\nmanipulation for training purposes. CodeTF serves as a one-stop solution, covering these essential aspects.\n2. User-Friendliness: CodeTF prioritizes user-friendliness, ensuring that the library is not just useful but also accessible\nto a wide range of users, from beginners to advanced researchers. We simplify installation and setup processes,\nreducing the need for complex conﬁgurations or dependencies. The goal is to ensure that users can easily get started\nwith CodeTF, regardless of their prior experience or expertise.\n3. Usability: While user-friendliness is about the initial experience of getting started with CodeTF, usability focuses on\nthe ease and efﬁciency of interacting with the library on an ongoing basis. We aim to provide a cohesive and intuitive\ninterface for different code intelligence tasks. This involves simplifying complex tasks such as data collection,\ncode attribute extraction, data conversion for deep learning frameworks, GPU management, and training loop\nconﬁguration.\n4. Extensibility: We recognize the rapidly evolving nature of Code LLMs, with new models employing different\ntraining approaches and additional benchmarks emerging. To accommodate future advancements, we design\nCodeTF following software engineering principles such as Object-Oriented Programming, ensuring extensibility\nand ﬂexibility.\n5. Scalability: Managing system scalability during training and serving of Code LLMs can be challenging, particularly\nacross different devices and environments. CodeTF simpliﬁes this process by leveraging scalable infrastructure and\noptimizing resource allocation.\n6. Reproducibility: Reproducibility is a crucial aspect of Code LLMs, especially when evaluating their performance\non well-known benchmarks such as HumanEval [12], MBPP [23], and APPS [13]. However, many released model\ncodebases lack the necessary scripts to reproduce results, hindering the research community’s ability to verify Code' metadata={'file_sha1': '0131fc462cdbaf7a4637eb48538b00e466c550ee', 'file_size': 53771, 'file_name': 'codetf_5.pdf', 'chunk_size': 500, 'chunk_overlap': 0, 'date': '20230620', 'summarization': 'false'}
2023-06-20 20:23:27,643:INFO - error_code=invalid_api_key error_message= error_param=None error_type=invalid_request_error message='OpenAI API error received' stream_error=False
2023-06-20 20:23:27,651 [ERROR] utils.vectors: Error creating vector for document <empty message>
2023-06-20 20:23:27,652 [INFO] utils.vectors: Creating vector for document
2023-06-20 20:23:27,652 [INFO] utils.vectors: Document: page_content='LLM performance. CodeTF addresses this issue through its uniﬁed interface capable of loading a wide range of\nCode LLMs, alongside an Evaluation interface that facilitates reproducibility for the research community.\n2.3\nModules\nGiven the motivation and design principles, we have designed modules that align with these goals. The CodeTF library\nconsists of six main modules: Model Zoo, Model Serving, Model Training, Evaluator, Data Utility, and Code Utility.\n• The Model Zoo contains conﬁgurations for well-known pretrained or ﬁne-tuned models for speciﬁc tasks.\nThree major types of Code LLMs are considered: decoder-only (or GPT-style) models, encoder-decoder (or\nSeq2Seq) models , and encoder-only (or BERT-style) models.\n• The Model Serving module can load models through an interface, specifying the model type (GPT, Seq2Seq,\nBERT), model size, and tasks for which the models are intended (pretraining, summarization, generation, etc.).\nThe module can perform predictions on raw inputs, such as code snippets or natural language descriptions.\n• The Model Training module provides utilities for pretraining or ﬁne-tuning models, managing GPUs, and\nhandling neural network conﬁgurations. It receives the model loaded from the Model Serving module and\ninitializes the weights for training.\n• The Data Utility module offers utilities to assist the Model Training module in loading well-known datasets.\nThese datasets are preprocessed at various stages into appropriate formats for input to the Model Training\nmodule.\n• To facilitate source code processing, the Code Utility module provides tools for easy manipulation of source\ncode. This includes loading the AST parser for code parsing and performing traversal on the AST to extract\nimportant code attributes, which is a crucial step in data preprocessing.\n• Finally, the Evaluator module validates the results of trained models on well-known benchmarks. It can receive\ninstances loaded from the Model Serving module and compute model performance with evaluation metrics.\nMore details about each module can be found in the next section.\n5' metadata={'file_sha1': '0131fc462cdbaf7a4637eb48538b00e466c550ee', 'file_size': 53771, 'file_name': 'codetf_5.pdf', 'chunk_size': 500, 'chunk_overlap': 0, 'date': '20230620', 'summarization': 'false'}
2023-06-20 20:23:28,076:INFO - error_code=invalid_api_key error_message= error_param=None error_type=invalid_request_error message='OpenAI API error received' stream_error=False
2023-06-20 20:23:28,077 [ERROR] utils.vectors: Error creating vector for document <empty message>
INFO:     127.0.0.1:61930 - "POST /upload HTTP/1.1" 200 OK