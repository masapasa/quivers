"/quivr/frontend/app/chat/[chatId]/page.tsx" ```/* eslint-disable */
"use client";
import { UUID } from "crypto";
import { useEffect } from "react";

import PageHeading from "@/lib/components/ui/PageHeading";
import useChatsContext from "@/lib/context/ChatsProvider/hooks/useChatsContext";

import { ChatInput, ChatMessages } from "../components";

interface ChatPageProps {
  params: {
    chatId: UUID;
  };
}

export default function ChatPage({ params }: ChatPageProps) {
  const chatId: UUID | undefined = params.chatId;

  const { fetchChat, resetChat } = useChatsContext();

  useEffect(() => {
    if (!chatId) {
      resetChat();
    }
    fetchChat(chatId);
  }, []);

  return (
    <main className="flex flex-col w-full pt-10">
      <section className="flex flex-col flex-1 items-center w-full h-full min-h-screen">
        <PageHeading
          title="Chat with your brain"
          subtitle="Talk to a language model about your uploaded data"
        />
        <div className="relative h-full w-full flex flex-col flex-1 items-center">
          <div className="h-full flex-1 w-full flex flex-col items-center">
            <ChatMessages />
          </div>
          <ChatInput />
        </div>
      </section>
    </main>
  );
}
``` "/quivr/frontend/app/chat/components/index.ts" ```export * from "./ChatMessages";
export * from "./ChatMessages/ChatInput";
export * from "./ChatMessages/ChatMessage";
export * from "./ChatsList";
```
"/quivr/frontend/app/chat/components/ChatMessages/index.tsx" ```/* eslint-disable */
"use client";
import { useEffect, useRef } from "react";

import Card from "@/lib/components/ui/Card";
import useChatsContext from "@/lib/context/ChatsProvider/hooks/useChatsContext";
import { ChatMessage } from "./ChatMessage";

export const ChatMessages = (): JSX.Element => {
  const lastChatRef = useRef<HTMLDivElement | null>(null);

  const { chat } = useChatsContext();

  useEffect(() => {
    if (!chat || !lastChatRef.current) {
      return;
    }

    // if (chat.history.length > 2) {
    lastChatRef.current.scrollIntoView({
      behavior: "smooth",
      block: "end",
    });
    // }
  }, [chat, lastChatRef]);

  if (!chat) {
    return <></>;
  }

  return (
    <Card className="p-5 max-w-3xl w-full flex flex-col h-full mb-8">
      <div className="flex-1">
        {chat.history.length === 0 ? (
          <div className="text-center opacity-50">
            Ask a question, or describe a task.
          </div>
        ) : (
          chat.history.map(([speaker, text], idx) => {
            return (
              <ChatMessage
                ref={idx === chat.history.length - 1 ? lastChatRef : null}
                key={idx}
                speaker={speaker}
                text={text}
              />
            );
          })
        )}
      </div>
    </Card>
  );
};
export default ChatMessages;
```
"/quivr/frontend/app/chat/components/ChatMessages/ChatMessage.tsx" ```/* eslint-disable */
"use client";
import { forwardRef, Ref } from "react";
import ReactMarkdown from "react-markdown";

import { cn } from "@/lib/utils";

export const ChatMessage = forwardRef(
  (
    {
      speaker,
      text,
    }: {
      speaker: string;
      text: string;
    },
    ref
  ) => {
    return (
      <div
        ref={ref as Ref<HTMLDivElement>}
        className={cn(
          "py-3 px-3 md:px-6 w-full dark:border-white/25 flex flex-col max-w-4xl overflow-hidden scroll-pb-32",
          speaker === "user"
            ? ""
            : "bg-gray-200 dark:bg-gray-800 bg-opacity-60 py-8"
        )}
        style={speaker === "user" ? { whiteSpace: "pre-line" } : {}} // Add this line to preserve line breaks
      >
        <span
          className={cn(
            "capitalize  text-xs bg-sky-200 rounded-xl p-1 px-2 mb-2 w-fit  dark:bg-sky-700"
          )}
        >
          {speaker}
        </span>
        <>
          <ReactMarkdown
            // remarkRehypeOptions={{}}
            className="prose dark:prose-invert ml-[6px]  mt-1"
          >
            {text}
          </ReactMarkdown>
        </>
      </div>
    );
  }
);

ChatMessage.displayName = "ChatMessage";
```
"/quivr/frontend/app/chat/components/ChatMessages/ChatInput/index.tsx" ```/* eslint-disable */
"use client";
import Button from "@/lib/components/ui/Button";
import useChatsContext from "@/lib/context/ChatsProvider/hooks/useChatsContext";

import { ConfigButton } from "./ConfigButton";
import { MicButton } from "./MicButton";

export const ChatInput = (): JSX.Element => {
  const { isSendingMessage, sendMessage, setMessage, message, chat } =
    useChatsContext();

  return (
    <form
      onSubmit={(e) => {
        e.preventDefault();
        if (!isSendingMessage) {
          sendMessage(chat?.chatId);
        }
      }}
      className="sticky bottom-0 p-5 bg-white dark:bg-black rounded-t-md border border-black/10 dark:border-white/25 border-b-0 w-full max-w-3xl flex items-center justify-center gap-2 z-20"
    >
      <textarea
        autoFocus
        value={message[1]}
        onChange={(e) => setMessage((msg) => [msg[0], e.target.value])}
        onKeyDown={(e) => {
          if (e.key === "Enter" && !e.shiftKey) {
            e.preventDefault(); // Prevents the newline from being entered in the textarea
            if (!isSendingMessage) {
              sendMessage(chat?.chatId);
            } // Call the submit function here
          }
        }}
        className="w-full p-2 border border-gray-300 dark:border-gray-500 outline-none rounded dark:bg-gray-800"
        placeholder="Begin conversation here..."
      />
      <Button
        className="px-3 py-2 sm:px-4 sm:py-2"
        type="submit"
        isLoading={isSendingMessage}
      >
        {isSendingMessage ? "Thinking..." : "Chat"}
      </Button>
      <div className="flex items-center">
        <MicButton />
        <ConfigButton />
      </div>
    </form>
  );
};
```
"/quivr/frontend/app/chat/components/ChatMessages/ChatInput/MicButton.tsx" ```/* eslint-disable */
"use client";
import { MdMic, MdMicOff } from "react-icons/md";

import Button from "@/lib/components/ui/Button";
import { useSpeech } from "@/lib/context/ChatsProvider/hooks/useSpeech";

export const MicButton = (): JSX.Element => {
  const { isListening, speechSupported, startListening } = useSpeech();

  return (
    <Button
      className="p-2 sm:px-3"
      variant={"tertiary"}
      type="button"
      onClick={startListening}
      disabled={!speechSupported}
    >
      {isListening ? (
        <MdMicOff className="text-lg sm:text-xl lg:text-2xl" />
      ) : (
        <MdMic className="text-lg sm:text-xl lg:text-2xl" />
      )}
    </Button>
  );
};
```
"/quivr/frontend/app/chat/components/ChatMessages/ChatInput/ConfigButton.tsx" ```"use client";
import Link from "next/link";
import { MdSettings } from "react-icons/md";

import Button from "@/lib/components/ui/Button";

export const ConfigButton = (): JSX.Element => {
  return (
    <Link href={"/config"}>
      <Button className="p-2 sm:px-3" variant={"tertiary"}>
        <MdSettings className="text-lg sm:text-xl lg:text-2xl" />
      </Button>
    </Link>
  );
};
```
"/quivr/frontend/app/chat/components/ChatsList/index.tsx" ```/* eslint-disable */
"use client";
import useChatsContext from "@/lib/context/ChatsProvider/hooks/useChatsContext";
import { cn } from "@/lib/utils";
import { MotionConfig, motion } from "framer-motion";
import { useState } from "react";
import { MdChevronRight } from "react-icons/md";

import { NewChatButton } from "./NewChatButton";
import { ChatsListItem } from "./components/ChatsListItem/";

export const ChatsList = (): JSX.Element => {
  const { allChats, deleteChat } = useChatsContext();

  const [open, setOpen] = useState(true);

  return (
    <MotionConfig transition={{ mass: 1, damping: 10 }}>
      <motion.div
        drag="x"
        dragConstraints={{ right: 0, left: 0 }}
        // dragSnapToOrigin
        dragElastic={0.15}
        onDragEnd={(event, info) => {
          if (info.offset.x > 100 && !open) {
            setOpen(true);
          } else if (info.offset.x < -100 && open) {
            setOpen(false);
          }
        }}
        className="lg:sticky fixed top-0 left-0 bottom-0 overflow-visible z-30 border-r border-black/10 dark:border-white/25 bg-white dark:bg-black"
      >
        <motion.div
          animate={{
            width: open ? "fit-content" : "0px",
            opacity: open ? 1 : 0.5,
            boxShadow: open
              ? "10px 10px 16px rgba(0, 0, 0, 0)"
              : "10px 10px 16px rgba(0, 0, 0, 0.5)",
            // shadow: open ? "none" : "10px 10px 16px black",
          }}
          className={cn("overflow-hidden")}
        >
          <div className="min-w-fit max-h-screen  overflow-auto scrollbar">
            <aside className="relative max-w-xs w-full h-screen">
              <NewChatButton />
              <div className="flex flex-col gap-0">
                {allChats.map((chat) => (
                  <ChatsListItem
                    key={chat.chatId}
                    chat={chat}
                    deleteChat={deleteChat}
                  />
                ))}
              </div>
            </aside>
          </div>
        </motion.div>
        <button
          onClick={() => {
            setOpen(!open);
          }}
          className="absolute left-full top-16 lg:top-0 text-3xl bg-black dark:bg-white text-white dark:text-black rounded-r-full p-3 pl-1"
        >
          <motion.div
            whileTap={{ scale: 0.9 }}
            animate={{ scaleX: open ? -1 : 1 }}
          >
            <MdChevronRight />
          </motion.div>
        </button>
      </motion.div>
    </MotionConfig>
  );
};
```
"/quivr/frontend/app/chat/components/ChatsList/NewChatButton.tsx" ```import Link from "next/link";
import { BsPlusSquare } from "react-icons/bs";

export const NewChatButton = (): JSX.Element => (
  <Link
    href="/chat"
    className="px-4 py-2 mx-4 my-2 border border-primary bg-white dark:bg-black hover:text-white hover:bg-primary shadow-lg rounded-lg flex items-center justify-center sticky top-2 z-20"
  >
    <BsPlusSquare className="h-6 w-6 mr-2" /> New Chat
  </Link>
);
```
"/quivr/frontend/app/chat/components/ChatsList/components/ChatsListItem/ChatsListItem.tsx" ```import { UUID } from "crypto";
import Link from "next/link";
import { usePathname } from "next/navigation";
import { useState } from "react";
import { FiEdit, FiSave, FiTrash2 } from "react-icons/fi";
import { MdChatBubbleOutline } from "react-icons/md";


import { useAxios, useToast } from "@/lib/hooks";
import { Chat, ChatResponse } from "@/lib/types/Chat";
import { cn } from "@/lib/utils";

import { ChatName } from "./components/ChatName";

interface ChatsListItemProps {
  chat: Chat;
  deleteChat: (id: UUID) => void;
}

export const ChatsListItem = ({
  chat,
  deleteChat,
}: ChatsListItemProps): JSX.Element => {
  const pathname = usePathname()?.split("/").at(-1);
  const selected = chat.chatId === pathname;
  const [chatName, setChatName] = useState(chat.chatName);
  const { axiosInstance } = useAxios();
  const {publish} = useToast() 
  const [editingName, setEditingName] = useState(false);
  
  const updateChatName = async () => {
    if(chatName !== chat.chatName) {
        await axiosInstance.put<ChatResponse>(`/chat/${chat.chatId}/metadata`, {
      chat_name:chatName,

    });
    publish({text:'Chat name updated',variant:'success'})
    }
  }

  const handleEditNameClick = () => {
    if(editingName){
      setEditingName(false) ; 
      void updateChatName() 
    }
    else {
      setEditingName(true)
    }
  }

  return (
    <div
      className={cn(
        "w-full border-b border-black/10 dark:border-white/25 last:border-none relative group flex overflow-x-hidden hover:bg-gray-100 dark:hover:bg-gray-800",
        selected
          ? "bg-gray-100 dark:bg-gray-800 text-primary dark:text-white"
          : ""
      )}
    >
      <Link
        className="flex flex-col flex-1 min-w-0 p-4"
        href={`/chat/${chat.chatId}`}
        key={chat.chatId}
      >
        <div className="flex items-center gap-2">
         
          <MdChatBubbleOutline className="text-xl" />
          <ChatName setName={setChatName}  editing={editingName} name={chatName} />
        </div>
        <div className="grid-cols-2 text-xs opacity-50 whitespace-nowrap">
          {chat.chatId}
        </div>
      </Link>
      <div className="opacity-0 group-hover:opacity-100 flex items-center justify-center hover:text-red-700 bg-gradient-to-l from-white dark:from-black to-transparent z-10 transition-opacity">
        <button
          className="p-0"
          type="button"
          onClick={handleEditNameClick
          }
        >
         {editingName ? <FiSave/> :  <FiEdit />}
        </button>
        <button
          className="p-5"
          type="button"
          onClick={() => deleteChat(chat.chatId)}
        >
          <FiTrash2 />
        </button>
    
      </div>

      {/* Fade to white */}
      <div
        aria-hidden
        className="not-sr-only absolute left-1/2 top-0 bottom-0 right-0 bg-gradient-to-r from-transparent to-white dark:to-black pointer-events-none"
      ></div>
    </div>
  );
};
```
"/quivr/frontend/app/chat/components/ChatsList/components/ChatsListItem/index.ts" ```export * from "./ChatsListItem";
```
"/quivr/frontend/app/chat/components/ChatsList/components/ChatsListItem/components/ChatName.tsx" ```

interface ChatNameProps {
  name: string;
  editing?: boolean;
setName: (name:string) => void;
}

export const ChatName = ({setName,name,editing=false}:ChatNameProps):JSX.Element => {

    if(editing) {
        return <input onChange={(event) => setName(event.target.value)} autoFocus value={name} />
    }

    return (
        <p>{name}</p>
    )
}``` "frontend/app/chat/layout.tsx" ```"use client";
import { redirect } from "next/navigation";
import { ReactNode } from "react";

import { ChatsProvider } from "@/lib/context/ChatsProvider/chats-provider";
import { useSupabase } from "@/lib/context/SupabaseProvider";

import { ChatsList } from "./components";

interface LayoutProps {
  children?: ReactNode;
}

const Layout = ({ children }: LayoutProps): JSX.Element => {
  const { session } = useSupabase();
  if (session === null) {
    redirect("/login");
  }

  return (
    <ChatsProvider>
      <div className="relative h-full w-full flex items-start">
        <ChatsList />
        {children}
      </div>
    </ChatsProvider>
  );
};

export default Layout;```"frontend/app/chat/page.tsx" ```"use client";
import ChatPage from "./[chatId]/page";
export default ChatPage;```. "xhr.js:251 
        
        
        GET http://3.69.170.96/brains 404 (Not Found)
dispatchXhrRequest @ xhr.js:251
xhr @ xhr.js:49
dispatchRequest @ dispatchRequest.js:51
Promise.then (async)
request @ Axios.js:124
Axios.<computed> @ Axios.js:174
wrap @ bind.js:5
getAllUserBrainsFromBE @ useBrainState.ts:56
eval @ useBrainState.ts:151
eval @ useBrainState.ts:161

app-index.js:32  Error getting brain  for current user} AxiosError {message: 'Request failed with status code 404', name: 'AxiosError', code: 'ERR_BAD_REQUEST', config: {…}, request: XMLHttpRequest, …}
window.console.error @ app-index.js:32
console.error @ hydration-error-info.js:45
getAllUserBrainsFromBE @ useBrainState.ts:63
await in getAllUserBrainsFromBE (async)
eval @ useBrainState.ts:151
eval @ useBrainState.ts:161

app-index.js:32  Error: Error getting brain  for current user
    at getAllUserBrainsFromBE (webpack-internal:///(app-client)/./lib/context/BrainProvider/hooks/useBrainState.ts:44:15)
    at async eval (webpack-internal:///(app-client)/./lib/context/BrainProvider/hooks/useBrainState.ts:111:28)
window.console.error @ app-index.js:32
console.error @ hydration-error-info.js:45
eval @ useBrainState.ts:156
await in eval (async)
eval @ useBrainState.ts:161

xhr.js:251 
        
        
        GET http://3.69.170.96/chat/ 405 (Method Not Allowed)
dispatchXhrRequest @ xhr.js:251
xhr @ xhr.js:49
dispatchRequest @ dispatchRequest.js:51
Promise.then (async)
request @ Axios.js:124
Axios.<computed> @ Axios.js:174
wrap @ bind.js:5
fetchAllChats @ useChats.ts:28
eval @ useChats.ts:155

app-index.js:32  AxiosError {message: 'Request failed with status code 405', name: 'AxiosError', code: 'ERR_BAD_REQUEST', config: {…}, request: XMLHttpRequest, …}". i get this error on the browser. this is the nextjs javascript code for the frontend. identify the error in fastapi backend or nextjs frontend and give me correct complete modified code based on the code provided