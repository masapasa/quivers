"bot/bot.py" ```import os
import logging
import asyncio
import traceback
import html
import json
import tempfile
import pydub
from pathlib import Path
from datetime import datetime, timedelta
import openai
from telethon.sync import TelegramClient
from telethon.tl.functions.messages import GetDialogsRequest
from telethon.tl.types import InputPeerEmpty
import telegram
from telegram import (
    Update,
    User,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    BotCommand
)
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CallbackContext,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    AIORateLimiter,
    filters
)
from telegram.constants import ParseMode, ChatAction

import config
import database
import openai_utils

db = database.Database()
logger = logging.getLogger(__name__)

user_semaphores = {}
user_tasks = {}

def split_text_into_chunks(text, chunk_size):
    for i in range(0, len(text), chunk_size):
        yield text[i:i + chunk_size]

async def register_user_if_not_exists(update: Update, context: CallbackContext, user: User):
    if not db.check_if_user_exists(user.id):
        db.add_new_user(
            user.id,
            update.message.chat_id,
            username=user.username,
            first_name=user.first_name,
            last_name= user.last_name
        )
        db.start_new_dialog(user.id)

    if db.get_user_attribute(user.id, "current_dialog_id") is None:
        db.start_new_dialog(user.id)

    if user.id not in user_semaphores:
        user_semaphores[user.id] = asyncio.Semaphore(1)

    if db.get_user_attribute(user.id, "current_model") is None:
        db.set_user_attribute(user.id, "current_model", config.models["available_text_models"][0])
    n_used_tokens = db.get_user_attribute(user.id, "n_used_tokens")
    if isinstance(n_used_tokens, int) or isinstance(n_used_tokens, float):
        new_n_used_tokens = {
            "gpt-3.5-turbo": {
                "n_input_tokens": 0,
                "n_output_tokens": n_used_tokens
            }
        }
        db.set_user_attribute(user.id, "n_used_tokens", new_n_used_tokens)
    if db.get_user_attribute(user.id, "n_transcribed_seconds") is None:
        db.set_user_attribute(user.id, "n_transcribed_seconds", 0.0)
    if db.get_user_attribute(user.id, "n_generated_images") is None:
        db.set_user_attribute(user.id, "n_generated_images", 0)

async def is_bot_mentioned(update: Update, context: CallbackContext):
     try:
         message = update.message

         if message.chat.type == "private":
             return True

         if message.text is not None and ("@" + context.bot.username) in message.text:
             return True

         if message.reply_to_message is not None:
             if message.reply_to_message.from_user.id == context.bot.id:
                 return True
     except:
         return True
     else:
         return False

async def start_handle(update: Update, context: CallbackContext):
    await register_user_if_not_exists(update, context, update.message.from_user)
    user_id = update.message.from_user.id

    db.set_user_attribute(user_id, "last_interaction", datetime.now())
    db.start_new_dialog(user_id)

    reply_text = "Hi! I'm a Telegram bot that can send summaries of channels ðŸ¤–\n\n"
    reply_text += HELP_MESSAGE

    await update.message.reply_text(reply_text, parse_mode=ParseMode.HTML)

async def help_handle(update: Update, context: CallbackContext):
    await register_user_if_not_exists(update, context, update.message.from_user)
    user_id = update.message.from_user.id
    db.set_user_attribute(user_id, "last_interaction", datetime.now())
    await update.message.reply_text(HELP_MESSAGE, parse_mode=ParseMode.HTML)

async def list_handle(update: Update, context: CallbackContext):
    await register_user_if_not_exists(update, context, update.message.from_user)
    user_id = update.message.from_user.id
    db.set_user_attribute(user_id, "last_interaction", datetime.now())
    client = TelegramClient(config.your_username, config.api_id, config.api_hash)
    await client.start()
    result = await client(GetDialogsRequest(
        offset_date=None,
        offset_id=0,
        offset_peer=InputPeerEmpty(),
        limit=100,
        hash=0
    ))
    entities = result.chats
    reply_text = "Here is a list of all the telegram groups/channels you are part of:\n\n"
    keyboard = []
    for entity in entities:
        title = entity.title
        print(f"Title: {title}")
        keyboard.append([InlineKeyboardButton(title, callback_data=f'ingest {title}')])
        print(f"Keyboard: {keyboard}")
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(reply_text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
async def summary_handle(update: Update, context: CallbackContext):
    await register_user_if_not_exists(update, context, update.message.from_user)
    user_id = update.message.from_user.id
    db.set_user_attribute(user_id, "last_interaction", datetime.now())

    chat_title = update.message.text.split(' ', 1)[1]
    chats = await context.bot.get_chats()
    chat_id = None
    for chat in chats:
        if chat.title == chat_title:
            chat_id = chat.id
            break

    if not chat_id:
        await update.message.reply_text(f"Sorry, I couldn't find a group/channel with the name '{chat_title}'.", parse_mode=ParseMode.HTML)
        return

    messages = []
    end_date = datetime.now()
    start_date = end_date - timedelta(days=30)
    async for message in context.bot.iter_history(chat_id):
        if message.date < start_date:
            break
        messages.append(message.text)

    messages_str = ' '.join(messages)
    prompt = f"Please summarize the following text in one paragraph: {messages_str}"
    
    response = openai.Completion.create(
        engine="davinci",
        prompt=prompt,
        temperature=0.7,
        max_tokens=150,
        top_p=1,
        frequency_penalty=0,
        presence_penalty=0
    )

    summary = response['choices'][0]['text']
    
    reply_text = f"Here is a summary of the messages from the last 30 days in the group/channel '{chat_title}':\n\n{summary}"
    
    await update.message.reply_text(reply_text, parse_mode=ParseMode.HTML)
async def get_messages_handle(update: Update, context: CallbackContext):
    await register_user_if_not_exists(update, context, update.message.from_user)
    user_id = update.message.from_user.id
    db.set_user_attribute(user_id, "last_interaction", datetime.now())

    # if not update.message.text or len(update.message.text.split(' ', 1)) < 2:
    #     await update.message.reply_text("Please specify the name of the group/channel you want to get messages from.", parse_mode=ParseMode.HTML)
    #     return
    chat_title = "coworkers"

    #chat_title = update.message.text.split(' ', 1)[1]
    chats = await context.bot.get_chats()
    chat_id = None
    for chat in chats:
        if chat.title == chat_title:
            chat_id = chat.id
            break

    if not chat_id:
        await update.message.reply_text(f"Sorry, I couldn't find a group/channel with the name '{chat_title}'.", parse_mode=ParseMode.HTML)
        return

    messages = []
    end_date = datetime.now()
    start_date = end_date - timedelta(days=30)
    async for message in context.bot.iter_history(chat_id):
        if message.date < start_date:
            break
        messages.append(message.text)

    reply_text = f"Here are the messages from the last 30 days in the group/channel '{chat_title}':\n\n"
    for message in messages:
        reply_text += f"{message}\n\n"
    
    await update.message.reply_text(reply_text, parse_mode=ParseMode.HTML)
async def ingest_handle(update: Update, context: CallbackContext):
    await register_user_if_not_exists(update, context, update.message.from_user)
    user_id = update.message.from_user.id
    db.set_user_attribute(user_id, "last_interaction", datetime.now())

    if not update.message.text or len(update.message.text.split(' ', 1)) < 2:
        await update.message.reply_text("Please specify the name of the group/channel you want to ingest messages from.", parse_mode=ParseMode.HTML)
        return

    chat_title = update.message.text.split(' ', 1)[1]
    chats = await context.bot.get_chats()
    chat_id = None
    for chat in chats:
        if chat.title == chat_title:
            chat_id = chat.id
            break

    if not chat_id:
        await update.message.reply_text(f"Sorry, I couldn't find a group/channel with the name '{chat_title}'.", parse_mode=ParseMode.HTML)
        return

    end_date = datetime.now()
    start_date = end_date - timedelta(days=30)
    async for message in context.bot.iter_history(chat_id):
        if message.date < start_date:
            break
        db.add_message(chat_id, message.text, message.date)

    reply_text = f"Messages from the last 30 days in the group/channel '{chat_title}' have been ingested into MongoDB."
    
    await update.message.reply_text(reply_text, parse_mode=ParseMode.HTML)
async def post_init(application: Application):
    await application.bot.set_my_commands([
        BotCommand("/start", "Start new dialog"),
        BotCommand("/help", "Select chat mode"),
        BotCommand("/list", "List all the groups"),
        BotCommand("/ingest", "Ingest messages from a group"),
        BotCommand("/summary", "Summary of the last 5 days"),
        BotCommand("/get_messages", "Get messages from a group"),
    ])
def run_bot() -> None:
    application = (
        ApplicationBuilder()
        .token(config.telegram_token)
        .concurrent_updates(True)
        .rate_limiter(AIORateLimiter(max_retries=5))
        .http_version("1.1")
        .get_updates_http_version("1.1")
        .post_init(post_init)
        .build()
    )
    
    user_filter = filters.ALL
    if len(config.allowed_telegram_usernames) > 0:
        usernames = [x for x in config.allowed_telegram_usernames if isinstance(x, str)]
        any_ids = [x for x in config.allowed_telegram_usernames if isinstance(x, int)]
        user_ids = [x for x in any_ids if x > 0]
        group_ids = [x for x in any_ids if x < 0]
        user_filter = filters.User(username=usernames) | filters.User(user_id=user_ids) | filters.Chat(chat_id=group_ids)

    application.add_handler(CommandHandler("start", start_handle, filters=user_filter))
    application.add_handler(CommandHandler("help", help_handle, filters=user_filter))
    
    application.add_handler(CommandHandler("list", list_handle, filters=user_filter))
    
    application.add_handler(CommandHandler("summary", summary_handle, filters=user_filter))
    application.add_handler(CommandHandler("ingest", ingest_handle, filters=user_filter))
    application.add_handler(CommandHandler("get_messages", get_messages_handle, filters=user_filter))

    
    application.run_polling()

if __name__ == "__main__":
    run_bot()```"bot/database.py" ```from typing import Optional, Any

import pymongo
import uuid
from datetime import datetime

import config
class Database:
    def __init__(self):
        self.client = pymongo.MongoClient(config.mongodb_uri)
        self.db = self.client["chatgpt_telegram_bot"]

        self.user_collection = self.db["user"]
        self.dialog_collection = self.db["dialog"]
        self.message_collection = self.db["message"]

    def add_message(self, chat_id: int, message: str, timestamp: datetime):
        message_dict = {
            "chat_id": chat_id,
            "message": message,
            "timestamp": timestamp
        }
        self.message_collection.insert_one(message_dict)

    def get_messages(self, chat_id: int, start_date: datetime, end_date: datetime):
        messages = self.message_collection.find({
            "chat_id": chat_id,
            "timestamp": {"$gte": start_date, "$lte": end_date}
        })
        print(messages)
        return [message["message"] for message in messages]

    def check_if_user_exists(self, user_id: int, raise_exception: bool = False):
        if self.user_collection.count_documents({"_id": user_id}) > 0:
            return True
        else:
            if raise_exception:
                raise ValueError(f"User {user_id} does not exist")
            else:
                return False

    def add_new_user(
        self,
        user_id: int,
        chat_id: int,
        username: str = "",
        first_name: str = "",
        last_name: str = "",
    ):
        user_dict = {
            "_id": user_id,
            "chat_id": chat_id,

            "username": username,
            "first_name": first_name,
            "last_name": last_name,

            "last_interaction": datetime.now(),
            "first_seen": datetime.now(),

            "current_dialog_id": None,
            "current_chat_mode": "assistant",
            "current_model": config.models["available_text_models"][0],

            "n_used_tokens": {},

            "n_generated_images": 0,
            "n_transcribed_seconds": 0.0
        }

        if not self.check_if_user_exists(user_id):
            self.user_collection.insert_one(user_dict)

    def start_new_dialog(self, user_id: int):
        self.check_if_user_exists(user_id, raise_exception=True)

        dialog_id = str(uuid.uuid4())
        dialog_dict = {
            "_id": dialog_id,
            "user_id": user_id,
            "chat_mode": self.get_user_attribute(user_id, "current_chat_mode"),
            "start_time": datetime.now(),
            "model": self.get_user_attribute(user_id, "current_model"),
            "messages": []
        }
        self.dialog_collection.insert_one(dialog_dict)
        self.user_collection.update_one(
            {"_id": user_id},
            {"$set": {"current_dialog_id": dialog_id}}
        )

        return dialog_id

    def get_user_attribute(self, user_id: int, key: str):
        self.check_if_user_exists(user_id, raise_exception=True)
        user_dict = self.user_collection.find_one({"_id": user_id})

        if key not in user_dict:
            return None

        return user_dict[key]

    def set_user_attribute(self, user_id: int, key: str, value: Any):
        self.check_if_user_exists(user_id, raise_exception=True)
        self.user_collection.update_one({"_id": user_id}, {"$set": {key: value}})

    def update_n_used_tokens(self, user_id: int, model: str, n_input_tokens: int, n_output_tokens: int):
        n_used_tokens_dict = self.get_user_attribute(user_id, "n_used_tokens")

        if model in n_used_tokens_dict:
            n_used_tokens_dict[model]["n_input_tokens"] += n_input_tokens
            n_used_tokens_dict[model]["n_output_tokens"] += n_output_tokens
        else:
            n_used_tokens_dict[model] = {
                "n_input_tokens": n_input_tokens,
                "n_output_tokens": n_output_tokens
            }

        self.set_user_attribute(user_id, "n_used_tokens", n_used_tokens_dict)

    def get_dialog_messages(self, user_id: int, dialog_id: Optional[str] = None):
        self.check_if_user_exists(user_id, raise_exception=True)

        if dialog_id is None:
            dialog_id = self.get_user_attribute(user_id, "current_dialog_id")

        dialog_dict = self.dialog_collection.find_one({"_id": dialog_id, "user_id": user_id})
        return dialog_dict["messages"]

    def set_dialog_messages(self, user_id: int, dialog_messages: list, dialog_id: Optional[str] = None):
        self.check_if_user_exists(user_id, raise_exception=True)

        if dialog_id is None:
            dialog_id = self.get_user_attribute(user_id, "current_dialog_id")

        self.dialog_collection.update_one(
            {"_id": dialog_id, "user_id": user_id},
            {"$set": {"messages": dialog_messages}}
        )
    def get_all_chat_ids(self):
        chat_ids = []
        for user in self.user_collection.find():
            chat_id = user.get('chat_id')
            if chat_id:
                chat_ids.append(chat_id)
        return chat_ids```. "/quivr/.venv/bin/python /chatgpt_telegram_bot/bot/boot4.py
No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/quivr/.venv/lib/python3.11/site-packages/telegram/ext/_application.py", line 1104, in process_update
    await coroutine
  File "/quivr/.venv/lib/python3.11/site-packages/telegram/ext/_handler.py", line 141, in handle_update
    return await self.callback(update, context)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/chatgpt_telegram_bot/bot/boot4.py", line 214, in get_messages_handle
    chats = await context.bot.get_chats()
                  ^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'ExtBot' object has no attribute 'get_chats'
No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/quivr/.venv/lib/python3.11/site-packages/telegram/ext/_application.py", line 1104, in process_update
    await coroutine
  File "/quivr/.venv/lib/python3.11/site-packages/telegram/ext/_handler.py", line 141, in handle_update
    return await self.callback(update, context)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/chatgpt_telegram_bot/bot/boot4.py", line 214, in get_messages_handle
    chats = await context.bot.get_chats()
                  ^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'ExtBot' object has no attribute 'get_chats'". where should it get the name of the group/channel? After the /list endpoints list all the groups/channels, i would like to press one of the groups/channels and get the messages from that group/channel and maybe ingest the messages concurrently to mongodb. modify "database.py" as necessary. give me only complete correct modified python code for a telegram bot to get messages from a group/channel
```