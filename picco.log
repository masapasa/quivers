"tts_service.py" ```import json
import requests
import pygame

class TextToSpeechService:
    def __init__(self):
        config = json.load(open("config.json"))
        self.url = "https://play.ht/api/v2/tts"
        self.headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {config['play_ht_api_key']}"
        }

    def speak(self, text):
        data = {
            "speed": 1,
            "text": text,
            "voice": "s3://voice-cloning-zero-shot/cd1e0cf3-0106-4dd2-9406-6ccea4d70cf2/kitt-voice/manifest.json"
        }
        response = requests.post(self.url, headers=self.headers, data=json.dumps(data))
        with open('output.mp3', 'wb') as f:
            f.write(response.content)
        pygame.mixer.init()
        pygame.mixer.music.load("output.mp3")
        pygame.mixer.music.play()
        while pygame.mixer.music.get_busy():
            pass```"main.py" ```import json
from chat_gpt_service import ChatGPTService
from input_listener import InputListener
import pvporcupine
import struct
import os
import pyaudio
import openai

from tts_service import TextToSpeechService

config = json.load(open("config.json"))
openai.api_key = config["openai_key"]
if "openai_org" in config:
    openai.organization = config["openai_org"]


class WakeWordDetector:
    def __init__(self, library_path, model_path, keyword_paths):
        self.chat_gpt_service = ChatGPTService()
        pv_access_key = config["pv_access_key"]

        self.handle = pvporcupine.create(
            keywords=["picovoice"],
            access_key=pv_access_key,
            sensitivities=[1],
        )

        self.pa = pyaudio.PyAudio()
        self.listener = InputListener(
            config["silence_threshold"] if "silence_threshold" in config else 75,
            config["silence_duration"] if "silence_duration" in config else 1.5,
        )
        sound_card_name = (
            config["sound_card_name"]
            if "sound_card_name" in config
            else "seeed-2mic-voicecard"
        )

        print("Looking for sound card...")
        for i in range(self.pa.get_device_count()):
            device_info = self.pa.get_device_info_by_index(i)
            print(device_info["name"]) 
            if sound_card_name in device_info["name"]:
                print("Found sound card! Using device index: %d" % i)
                self.input_device_index = i
                break
        else:
            raise Exception("Could not find sound device")

        self.speech = TextToSpeechService()

        self._init_audio_stream()

    def _init_audio_stream(self):
        self.audio_stream = self.pa.open(
            rate=self.handle.sample_rate,
            channels=1,
            format=pyaudio.paInt16,
            input=True,
            frames_per_buffer=self.handle.frame_length,
        )

    def run(self):
        try:
            while True:
                pcm = self.audio_stream.read(self.handle.frame_length)
                pcm = struct.unpack_from("h" * self.handle.frame_length, pcm)
                porcupine_keyword_index = self.handle.process(pcm)
                if porcupine_keyword_index >= 0:
                    print("Wake word detected!")
                    self.audio_stream.close()
                    self.audio_stream = None

                    audio_path = self.listener.listen()
                    print("Transcribing...")

                    audio_file = open(audio_path, "rb")

                    transcript = openai.Audio.translate("whisper-1", audio_file)
                    print(transcript)

                    print("Sending to chat GPT...")
                    response = self.chat_gpt_service.send_to_chat_gpt(
                        transcript["text"]
                    )
                    print(response)


                    print("Playing response...")
                    self.speech.speak(response)
                    os.remove(audio_path)
                    self._init_audio_stream()

                    print("Listening for wake word...")

        except KeyboardInterrupt:
            pass
        finally:
            if self.audio_stream is not None:
                self.audio_stream.close()
            if self.pa is not None:
                self.pa.terminate()
            self.handle.delete()


if __name__ == "__main__":
    library_path = "/path/to/porcupine/library"
    model_path = "/path/to/porcupine/model"
    keyword_paths = ["/path/to/porcupine/keyword"]

    detector = WakeWordDetector(library_path, model_path, keyword_paths)
    detector.run()```"Transcribing...
{
  "text": "Let's start."
}
Sending to chat GPT...
Absolutely! I'm ready when you are. What can I assist you with today?
Playing response...
Traceback (most recent call last):
  File "VoiceBotChatGPT-RaspberryPI/main.py", line 113, in <module>
    detector.run()
  File "VoiceBotChatGPT-RaspberryPI/main.py", line 93, in run
    self._init_audio_stream()
  File "VoiceBotChatGPT-RaspberryPI/main.py", line 56, in _init_audio_stream
    self.audio_stream = self.pa.open(
  File "python3.9/dist-packages/pyaudio/__init__.py", line 639, in open
    stream = PyAudio.Stream(self, *args, **kwargs)
  File "python3.9/dist-packages/pyaudio/__init__.py", line 441, in __init__
    self._stream = pa.open(**arguments)
OSError: [Errno -9996] Invalid input device (no default output device)". identify the error and give me complete correct modified code to resolve this error